{"version":3,"sources":["util/allPathsWorker.js","theme.js","util/Node.js","style.js","components/InputGrid/style.js","components/InputGrid/InputGrid.js","components/ResultBar/style.js","components/ResultBar/ResultBar.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["addMethods","methods","module","exports","w","Worker","URL","createObjectURL","Blob","name","createMuiTheme","palette","primary","light","dark","main","contrastText","secondary","success","error","Node","id","value","this","_id","_value","_neighbours","neighbour","push","grid","nodes","map","row","i","item","j","length","node","k","l","addNeighbour","reduce","acc","val","concat","useStyles","makeStyles","theme","button","marginRight","spacing","topBar","width","position","top","zIndex","padding","marginBottom","backgroundColor","title","textAlign","color","background","default","content","flexGrow","paddingLeft","paddingRight","paddingTop","margin","paper","inputGridPaper","controlPanel","marginTop","resultsBox","optionsPanel","control","actionButton","marginLeft","flexBasis","justifyContent","boardItem","inputBorder","border","borderColor","borderRadius","highlight","InputGrid","values","onChange","highlights","checkValidInput","classes","container","className","key","some","h","_","isEqual","variant","inputProps","style","e","target","text","display","verticalAlign","showIcon","float","ResultBar","word","isHighlighting","canHighlight","onHighlight","onClick","ALLOWED_CHARS","Main","useTheme","isPortraitDevice","useMediaQuery","genEmptyGrid","height","Array","fill","useState","gridWidth","setGridWidth","gridHeight","setGridHeight","inputs","setInputs","dictName","setDictName","dict","dictionary","setDictionary","minWordLength","setMinWordLength","warningText","setWarningText","showOptionsPanel","setShowOptionsPanel","processing","setProcessing","foundWords","setFoundWords","highlightWord","setHighlightWord","highlightPath","setHighlightPath","clearResults","countFoundWords","fw","Object","entries","handlePaths","paths","results","path","join","uniqResults","uniqBy","groupedResults","groupBy","string","keys","orderBy","str","includes","xs","newValue","stateClone","cloneDeep","toUpperCase","disabled","every","setTimeout","inputGrid","graph","graphFromGrid","promises","worker","Promise","resolve","reject","addEventListener","data","type","workerPathsFrom","all","then","findWords","newInputs","Math","floor","random","cursor","prev","size","accept","input","multiple","hidden","fr","FileReader","readAsText","files","onload","result","split","htmlFor","component","isEmpty","reverse","wordLen","words","expandIcon","aria-controls","window","scrollTo","onFinish","pathIndex","animId","setInterval","clearInterval","runHighlightAnimation","App","CssBaseline","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ee2a1b59.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"workerPathsFrom\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(URL.createObjectURL(new Blob([\"!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\\\"undefined\\\"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\\\"object\\\"===typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\\\"default\\\",{enumerable:!0,value:e}),2&t&&\\\"string\\\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\\\"a\\\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\\\"/\\\",n(n.s=0)}([function(e,t,n){\\\"use strict\\\";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){if(e){if(\\\"string\\\"===typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\\\"Object\\\"===n&&e.constructor&&(n=e.constructor.name),\\\"Map\\\"===n||\\\"Set\\\"===n?Array.from(n):\\\"Arguments\\\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}function u(e){if(\\\"undefined\\\"===typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=o(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError(\\\"Invalid attempt to iterate non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\")}var r,u,i=!0,a=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return i=e.done,e},e:function(e){a=!0,u=e},f:function(){try{i||null==r.return||r.return()}finally{if(a)throw u}}}}function i(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if(\\\"undefined\\\"!==typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||o(e)||function(){throw new TypeError(\\\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\")}()}function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return!0},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){return!1},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[];if(r.push(e),o.push(e),n(i(r)))return r.pop(),c;t(i(r))&&c.push(i(r));var f,s=e.neighbours||e._neighbours,l=u(s);try{for(l.s();!(f=l.n()).done;){var d=f.value;r.includes(d)||a(d,t,n,r,o,c)}}catch(p){l.e(p)}finally{l.f()}return r.pop(),c}n.r(t),n.d(t,\\\"workerPathsFrom\\\",(function(){return f}));var c=function(e){return e.map((function(e){return e.value||e._value})).join(\\\"\\\").toLowerCase()},f=function(e,t){var n=t.minWordLength,r=t.dictionary,o=a(e,(function(e){return e.length>=n&&r.includes(c(e))}),(function(e){return!r.some((function(t){return t.startsWith(c(e))}))}));postMessage(o)};addEventListener(\\\"message\\\",(function(e){var n,r=e.data,o=r.type,u=r.method,i=r.id,a=r.params;\\\"RPC\\\"===o&&u&&((n=t[u])?Promise.resolve().then((function(){return n.apply(t,a)})):Promise.reject(\\\"No such method\\\")).then((function(e){postMessage({type:\\\"RPC\\\",id:i,result:e})})).catch((function(e){var t={message:e};e.stack&&(t.message=e.message,t.stack=e.stack,t.name=e.name),postMessage({type:\\\"RPC\\\",id:i,error:t})}))})),postMessage({type:\\\"RPC\\\",method:\\\"ready\\\"})}]);\\n//# sourceMappingURL=2f0ce401de70b0a66c5b.worker.js.map\"])), { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import { createMuiTheme } from '@material-ui/core/styles'\n\nexport default createMuiTheme({\n    palette: {\n        primary: {\n            light: '#7d87df',\n            dark: '#0d317d',\n            main: '#4b5aad',\n            contrastText: '#ffffff'\n        },\n        secondary: {\n            light: '#ffb66e',\n            dark: '#dd6e00',\n            main: '#ff9b38',\n            contrastText: '#ffffff'\n        },\n        success: {\n            light: '#00f563',\n            dark: '#007E33',\n            main: '#00C851',\n            contrastText: '#ffffff'\n        },\n        error: {\n            light: '#ff8888',\n            dark: '#CC0000',\n            main: '#ff4444',\n            contrastText: '#ffffff'\n        }\n    }\n})\n","export class Node {\n    constructor(id, value) {\n        this._id = id\n        this._value = value\n        this._neighbours = []\n    }\n\n    get id() {\n        return this._id\n    }\n\n    get value() {\n        return this._value\n    }\n\n    get neighbours() {\n        return this._neighbours\n    }\n\n    addNeighbour(neighbour) {\n        this._neighbours.push(neighbour)\n    }\n\n    static graphFromGrid(grid) {\n        const nodes = grid.map((row, i) => row.map((item, j) => new Node([i, j], item)))\n        for (let i = 0; i < nodes.length; i++) {\n            for (let j = 0; j < nodes[0].length; j++) {\n\n                const node = nodes[i][j]\n\n                for (let k = -1; k <= 1; k++) {\n                    for (let l = -1; l <= 1; l++) {\n                        if (k === 0 && l === 0) {\n                            continue; // Don't add self\n                        }\n                        if (i + k >= 0 && i + k < nodes.length\n                            && j + l >= 0 && j + l < nodes[0].length) {\n                            node.addNeighbour(nodes[i + k][j + l])\n                        }\n                    }\n                }\n            }\n        }\n        return nodes.reduce((acc, val) => acc.concat(val), [])\n    }\n}\n\nexport default Node\n","import { makeStyles } from '@material-ui/core/index'\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        marginRight: theme.spacing(2)\n    },\n    topBar: {\n        width: '100%',\n        position: 'sticky',\n        top: 0,\n        zIndex: 5,\n        padding: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        backgroundColor: theme.palette.primary.main\n    },\n    title: {\n        textAlign: 'center',\n        color: theme.palette.background.default\n    },\n    content: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(2.5),\n        paddingRight: theme.spacing(2.5),\n        paddingTop: theme.spacing(1),\n        margin: 0,\n        textAlign: 'center',\n        width: '100%',\n    },\n    paper: {\n        padding: theme.spacing(2)\n    },\n    inputGridPaper: {\n        position: 'sticky',\n        top: theme.spacing(12.5)\n    },\n    controlPanel: {\n        marginTop: theme.spacing(2)\n    },\n    resultsBox: {\n        marginTop: theme.spacing(2)\n    },\n    optionsPanel: {\n        marginTop: theme.spacing(2)\n    },\n    control:{\n        margin: theme.spacing(1)\n    },\n    actionButton: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1)\n    }\n}))\n\nexport default useStyles\n","import { makeStyles } from '@material-ui/core/index'\n\nconst useStyles = makeStyles(theme => ({\n    row: {\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        width: 'auto',\n        flexBasis: '100%',\n        justifyContent: 'center'\n    },\n    boardItem: {\n        padding: 0,\n        margin: theme.spacing(0.75),\n    },\n    inputBorder: {\n        border: `4px solid`,\n        borderColor: theme.palette.background.paper,\n        borderRadius: '8px'\n    },\n    highlight: {\n        borderColor: theme.palette.secondary.main\n    }\n}))\n\nexport default useStyles\n","import React from 'react'\nimport _ from 'lodash'\n\nimport {\n    Grid,\n    TextField\n} from '@material-ui/core/index'\n\nimport useStyles from './style'\n\nconst InputGrid = ({values, onChange, highlights, checkValidInput}) => {\n    const classes = useStyles()\n\n    const width = values[0].length\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            className={classes.container}\n        >\n            {\n                values.map((row, i) => (\n                    <Grid\n                        container\n                        className={classes.row}\n                        key={`row${i}`}\n                    >\n                        {row.map((value, j) => (\n                            <Grid\n                                item\n                                key={`item${i}${j}`}\n                                className={classes.boardItem}\n                            >\n                                <div\n                                    className={`${classes.inputBorder} ${highlights.some(h => _.isEqual(h, [i, j])) ? classes.highlight : ''}`}\n                                >\n                                    <TextField\n                                        variant=\"outlined\"\n                                        error={!checkValidInput(values[i][j])}\n                                        inputProps={{ style: {\n                                            'width': `${45 / width}vmin`,\n                                            'height': `${45 / width}vmin`,\n                                            'padding': 0,\n                                            'fontSize': '5vmin',\n                                            'textAlign': 'center',\n                                            'boxSizing': 'border-box'\n                                        }}}\n\n                                        value={value}\n                                        onChange={e => {\n                                            onChange(i, j, e.target.value)\n                                        }}\n                                    />\n                                </div>\n                            </Grid>\n                        ))}\n                    </Grid>\n                ))\n            }\n        </Grid>\n\n    )\n}\n\nexport default InputGrid\n","import { makeStyles } from '@material-ui/core/index'\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        padding: theme.spacing(1),\n        margin: theme.spacing(0.5)\n    },\n    text: {\n        display: 'inline-block',\n        verticalAlign: 'middle'\n    },\n    showIcon: {\n        display: 'inline-block',\n        verticalAlign: 'middle',\n        float: 'right'\n    }\n}))\n\nexport default useStyles\n","import React from 'react'\n\nimport {\n    Paper, Typography\n} from '@material-ui/core/index'\n\nimport VisibilityIcon from '@material-ui/icons/Visibility'\n\nimport useStyles from './style'\n\nconst ResultBar = ({ word, isHighlighting, canHighlight, onHighlight }) => {\n    const classes = useStyles()\n\n    return (\n        <Paper className={classes.paper}>\n            <Typography className={classes.text}>{word}</Typography>\n            <VisibilityIcon\n                className={classes.showIcon}\n                color={isHighlighting ? 'primary' : 'disabled'}\n                style={canHighlight ? {'cursor': 'pointer'} : {}}\n                onClick={() => {\n                    if (canHighlight) {\n                        onHighlight()\n                    }\n                }}\n            />\n        </Paper>\n    )\n}\n\nexport default ResultBar\n","import React, { useState } from 'react'\nimport _ from 'lodash'\n\nimport { useTheme } from \"@material-ui/core/styles\";\n\nimport {\n    Grid,\n    Paper,\n    Typography,\n    Button,\n    Select,\n    MenuItem,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    FormControl,\n    FormHelperText,\n} from '@material-ui/core/index'\n\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\n\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\n\nimport Node from './util/Node'\nimport dict from './words.json'\nimport worker from 'workerize-loader?inline!./util/allPathsWorker' // eslint-disable-line import/no-webpack-loader-syntax\n\nimport useStyles from './style'\n\nimport InputGrid from './components/InputGrid/InputGrid'\nimport ResultBar from './components/ResultBar/ResultBar';\n\nconst ALLOWED_CHARS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'QU', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\nconst Main = () => {\n\n    const classes = useStyles()\n    const theme = useTheme()\n    const isPortraitDevice = useMediaQuery('(max-aspect-ratio: 11/10)')\n\n    function genEmptyGrid(width, height) {\n        return Array(height).fill().map(() => Array(width).fill(''))\n    }\n\n    // State\n    const [gridWidth, setGridWidth] = useState(4)\n    const [gridHeight, setGridHeight] = useState(4)\n    const [inputs, setInputs] = useState(genEmptyGrid(gridWidth, gridHeight))\n    const [dictName, setDictName] = useState('built in')\n    const [dictionary, setDictionary] = useState(dict)\n    const [minWordLength, setMinWordLength] = useState(3)\n\n    const [warningText, setWarningText] = useState('')\n    const [showOptionsPanel, setShowOptionsPanel] = useState(false)\n    const [processing, setProcessing] = useState(false)\n    const [foundWords, setFoundWords] = useState([])\n\n    const [highlightWord, setHighlightWord] = useState('')\n    const [highlightPath, setHighlightPath] = useState([])\n\n\n    function clearResults() {\n        setFoundWords({})\n    }\n\n    function clearGrid() {\n        setInputs(genEmptyGrid(gridWidth, gridHeight))\n        clearResults()\n    }\n\n    function setBoardSize(size) {\n        setGridWidth(size)\n        setGridHeight(size)\n        setInputs(genEmptyGrid(size, size))\n        clearResults()\n    }\n\n    function countFoundWords(fw) {\n        return Object.entries(fw).reduce((acc, [wordLen, words]) => acc + words.length, 0)\n    }\n\n    function handlePaths(paths) {\n        const results = paths\n            .map(path => ({\n                'string': path.map(node => node.value || node._value).join(''),\n                'path': path.map(node => node.id || node._id)\n            })\n            )\n\n        const uniqResults = _.uniqBy(results, 'string')\n        const groupedResults = _.groupBy(uniqResults, ({ string }) => string.length)\n\n        for (const key of Object.keys(groupedResults)) {\n            groupedResults[key] = _.orderBy(groupedResults[key], ['string'], ['asc'])\n        }\n\n        setFoundWords(groupedResults)\n    }\n\n    function checkValidInput(str) {\n        // /^([A-Z]|QU)$/g\n        return ALLOWED_CHARS.includes(str) || str === 'Q'\n    }\n\n    function findWords(inputGrid) {\n        setProcessing(true)\n        const graph = Node.graphFromGrid(inputGrid)\n\n        const workerInstances = Array(gridWidth * gridHeight).fill().map(() => new worker())\n\n        const promises = workerInstances.map((worker, i) => new Promise((resolve, reject) => {\n            worker.addEventListener('message', ({ data }) => {\n                if (data.type !== \"RPC\") {\n                    // Non-autogenerated control events\n                    resolve(data)\n                }\n            })\n\n            worker.workerPathsFrom(graph[i],\n                { minWordLength, dictionary }\n            )\n        }))\n\n        Promise.all(promises)\n            .then(results => results.reduce((acc, val) => acc.concat(val), []))\n            .then(handlePaths)\n            .then(() => setProcessing(false))\n\n    }\n\n    function runHighlightAnimation(path, onFinish) {\n        const animInterval = 200\n        const holdOnEnd = 1000\n\n        let pathIndex = 0\n\n        const animId = setInterval(() => {\n            if (pathIndex >= path.length) {\n                clearInterval(animId)\n                setTimeout(() => {\n                    setHighlightPath([])\n                    onFinish()\n                }, holdOnEnd)\n                return\n            }\n\n            setHighlightPath(prev => [...prev, path[pathIndex]])\n            pathIndex++\n\n        }, animInterval)\n    }\n\n    return (\n        <div>\n            <div className={classes.topBar}>\n                <Typography\n                    variant=\"h4\"\n                    className={classes.title}\n                >\n                    Boggle-Bot\n                </Typography>\n            </div>\n            <Grid\n                className={classes.content}\n                container\n                spacing={2}\n            >\n                <Grid item xs={isPortraitDevice ? 12 : 8}>\n                    <Paper className={`${classes.paper} ${classes.inputGridPaper}`}>\n                        <InputGrid\n                            values={inputs}\n                            checkValidInput={checkValidInput}\n                            highlights={highlightPath}\n                            onChange={(i, j, newValue) => {\n                                let stateClone = _.cloneDeep(inputs)\n                                stateClone[i][j] = newValue.toUpperCase()\n                                setInputs(stateClone)\n                                clearResults()\n                            }}\n                        />\n                        <div className={classes.controlPanel}>\n                            <Button\n                                className={classes.actionButton}\n                                variant='contained'\n                                color='primary'\n                                disabled={processing}\n                                onClick={() => {\n                                    if (!inputs.every(row => row.every(item => checkValidInput(item)))) {\n                                        setWarningText('Please fill in grid correctly')\n                                        setTimeout(() => setWarningText(''), 3000)\n                                        return\n                                    }\n                                    findWords(inputs)\n                                }}>\n                                Find Words\n                            </Button>\n                            <Button\n                                className={classes.actionButton}\n                                variant='contained'\n                                color='primary'\n                                disabled={processing}\n                                onClick={clearGrid}\n                            >\n                                Clear grid\n                            </Button>\n                            <Button\n                                className={classes.actionButton}\n                                variant='contained'\n                                color='primary'\n                                disabled={processing}\n                                onClick={() => {\n                                    let newInputs = genEmptyGrid(gridWidth, gridHeight)\n                                    newInputs = newInputs.map(row => row.map(i => ALLOWED_CHARS[Math.floor(Math.random() * ALLOWED_CHARS.length)]))\n                                    setInputs(newInputs)\n                                    clearResults()\n                                }}\n                            >\n                                Randomly fill grid\n                            </Button>\n                            <Typography color='error'>\n                                {warningText}\n                            </Typography>\n                            {processing ||\n                                (<div className={classes.optionsPanel}>\n                                    <div\n                                        style={{ cursor: 'pointer', display: 'inline-block' }}\n                                        onClick={() => setShowOptionsPanel(prev => !prev)}\n                                    >\n                                        <Typography style={{ display: 'inline-block', verticalAlign: 'middle' }}>\n                                            {showOptionsPanel ? 'Hide options' : 'Show options'}\n                                        </Typography>\n                                        {showOptionsPanel\n                                            ? <ExpandLessIcon style={{ display: 'inline-block', verticalAlign: 'middle' }} />\n                                            : <ExpandMoreIcon style={{ display: 'inline-block', verticalAlign: 'middle' }} />\n                                        }\n                                    </div>\n                                    {showOptionsPanel && (\n                                        <Paper className={`${classes.paper} ${classes.optionsPanel}`}>\n                                            <FormControl className={classes.control}>\n                                                <Select\n                                                    value={gridWidth}\n                                                    onChange={e => {\n                                                        setBoardSize(e.target.value)\n                                                    }}\n                                                >\n                                                    <MenuItem value={2}>2</MenuItem>\n                                                    <MenuItem value={3}>3</MenuItem>\n                                                    <MenuItem value={4}>4</MenuItem>\n                                                    <MenuItem value={5}>5</MenuItem>\n                                                    <MenuItem value={6}>6</MenuItem>\n                                                </Select>\n                                                <FormHelperText>Grid size</FormHelperText>\n                                            </FormControl>\n                                            <FormControl className={classes.control}>\n                                                <Select\n                                                    value={minWordLength}\n                                                    onChange={e => {\n                                                        setMinWordLength(e.target.value)\n                                                        clearResults()\n                                                    }}\n                                                >\n                                                    <MenuItem value={1}>1</MenuItem>\n                                                    <MenuItem value={2}>2</MenuItem>\n                                                    <MenuItem value={3}>3</MenuItem>\n                                                    <MenuItem value={4}>4</MenuItem>\n                                                    <MenuItem value={5}>5</MenuItem>\n                                                </Select>\n                                                <FormHelperText>Minimum word length</FormHelperText>\n                                            </FormControl>\n                                            <input\n                                                accept='text/*'\n                                                className={classes.input}\n                                                id='dictionary-upload'\n                                                multiple\n                                                type='file'\n                                                hidden\n                                                onChange={({ target }) => {\n                                                    const fr = new FileReader()\n                                                    fr.readAsText(target.files[0])\n                                                    fr.onload = (e) => {\n                                                        setDictionary(e.target.result.split('\\n'))\n                                                        setDictName(target.files[0].name)\n                                                        clearResults()\n                                                    }\n                                                }}\n                                            />\n                                            <label htmlFor='dictionary-upload'>\n                                                <FormControl className={classes.control}>\n                                                    <Button color='primary' component='span'>\n                                                        Upload custom dictionary\n                                                </Button>\n                                                    <FormHelperText\n                                                        style={{ paddingLeft: theme.spacing(1), paddingRight: theme.spacing(1) }}\n                                                    >\n                                                        {`Current dictionary: ${dictName}`}\n                                                    </FormHelperText>\n                                                </FormControl>\n                                            </label>\n                                        </Paper>\n                                    )}\n                                </div>\n                                )}\n                        </div>\n                    </Paper>\n                </Grid>\n                <Grid item xs={isPortraitDevice ? 12 : 4}>\n                    <Paper className={classes.paper}>\n                        {\n                            <Typography variant='h4'>\n                                {\n                                    processing ? 'Finding words...'\n                                        : _.isEmpty(foundWords)\n                                            ? 'Fill in grid to begin'\n                                            : `${countFoundWords(foundWords)} Word${countFoundWords(foundWords) > 1 ? 's' : ''} Found`\n                                }\n                            </Typography>\n                        }\n                        {\n                            Object.entries(foundWords).length > 0 &&\n                            (<div className={classes.resultsBox}>\n                                {\n                                    Object.entries(foundWords).reverse().map(([wordLen, words]) => (\n                                        <Accordion key={`${wordLen}-accordion`} >\n                                            <AccordionSummary\n                                                expandIcon={<ExpandMoreIcon />}\n                                                aria-controls={`${wordLen}-letter-content`}\n                                                id={`${wordLen}-letter-header`}\n                                            >\n                                                <Typography variant='h5'>{`${wordLen}-letter words`}</Typography>\n                                            </AccordionSummary>\n                                            <AccordionDetails style={{ display: 'block' }}>\n                                                {words.map(({ string, path }) =>\n                                                    <ResultBar\n                                                        key={string}\n                                                        word={string}\n                                                        isHighlighting={highlightWord === string}\n                                                        canHighlight={highlightWord === ''}\n                                                        onHighlight={() => {\n                                                            setHighlightWord(string)\n                                                            if (isPortraitDevice) {\n                                                                window.scrollTo(0, 0)\n                                                            }\n                                                            runHighlightAnimation(path,\n                                                                () => setHighlightWord(''))\n                                                        }}\n                                                    />\n                                                )}\n                                            </AccordionDetails>\n                                        </Accordion>\n                                    ))\n                                }\n                            </div>)\n                        }\n                    </Paper>\n                </Grid>\n\n            </Grid>\n\n        </div>\n    )\n}\n\nexport default Main\n","import React from 'react'\n\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport theme from './theme'\n\nimport Main from './Main'\n\nconst App = () => {\n\n  return (\n    <div>\n      <CssBaseline />\n      <ThemeProvider theme={theme}>\n          <Main />\n      </ThemeProvider>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}